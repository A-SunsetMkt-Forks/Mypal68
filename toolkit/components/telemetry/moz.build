# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

HAS_MISC_RULE = True

include('/ipc/chromium/chromium-config.mozbuild')

FINAL_LIBRARY = 'xul'

DIRS = [
    'hybrid-content',
]

DEFINES['MOZ_APP_VERSION'] = '"%s"' % CONFIG['MOZ_APP_VERSION']

LOCAL_INCLUDES += [
    '/xpcom/build',
    '/xpcom/threads',
]

SPHINX_TREES['telemetry'] = 'docs'

with Files('docs/**'):
    SCHEDULES.exclusive = ['docs']

if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
    CXXFLAGS += ['-Wno-error=shadow']

XPIDL_SOURCES += [
    'core/nsITelemetry.idl',
]

XPIDL_MODULE = 'telemetry'

EXPORTS.mozilla += [
    '!TelemetryEventEnums.h',
    '!TelemetryHistogramEnums.h',
    '!TelemetryProcessEnums.h',
    '!TelemetryScalarEnums.h',
    'core/ipc/TelemetryComms.h',
    'core/ipc/TelemetryIPC.h',
    'core/Telemetry.h',
    'other/CombinedStacks.h',
    'other/ProcessedStack.h',
    'TelemetryOriginEnums.h',
]

EXPORTS.mozilla.telemetry += [
    'core/Stopwatch.h',
]

SOURCES += [
    'core/ipc/TelemetryIPC.cpp',
    'core/ipc/TelemetryIPCAccumulator.cpp',
    'core/Stopwatch.cpp',
    'core/Telemetry.cpp',
    'core/TelemetryCommon.cpp',
    'core/TelemetryEvent.cpp',
    'core/TelemetryHistogram.cpp',
    'core/TelemetryOrigin.cpp',
    'core/TelemetryScalar.cpp',
    'other/CombinedStacks.cpp',
    'other/ProcessedStack.cpp',
    #'other/TelemetryIOInterposeObserver.cpp',
]

if CONFIG['OS_ARCH'] == 'WINNT':
    SOURCES += [
    #    'other/UntrustedModules.cpp',
    ]

# KeyedStackCapturer entirely relies on profiler to be enabled.
if CONFIG['MOZ_GECKO_PROFILER']:
    SOURCES += [
      'other/KeyedStackCapturer.cpp'
    ]

XPCOM_MANIFESTS += [
    'components.conf',
    'core/components.conf',
]

EXTRA_COMPONENTS += [
    'TelemetryStartup.manifest'
]

EXTRA_JS_MODULES += [
    'app/ClientID.jsm',
    'app/TelemetryArchive.jsm',
    'app/TelemetryController.jsm',
    'app/TelemetryEnvironment.jsm',
    'app/TelemetryReportingPolicy.jsm',
    'app/TelemetryScheduler.jsm',
    'app/TelemetrySend.jsm',
    'app/TelemetryStorage.jsm',
    'app/TelemetryTimestamps.jsm',
    'app/TelemetryUtils.jsm',
    'other/UITelemetry.jsm',
    'pings/CoveragePing.jsm',
    'pings/EcosystemTelemetry.jsm',
    'pings/EventPing.jsm',
    'pings/HealthPing.jsm',
    'pings/ModulesPing.jsm',
    'pings/TelemetrySession.jsm',
    #'pings/UntrustedModulesPing.jsm',
    'pings/UpdatePing.jsm',
    'TelemetryStartup.jsm',
]

# Generate histogram files.
histogram_files = [
    'Histograms.json',
    '/dom/base/nsDeprecatedOperationList.h',
]

GeneratedFile('TelemetryHistogramData.inc',
              script='build_scripts/gen_histogram_data.py',
              inputs=histogram_files)
GeneratedFile('TelemetryHistogramEnums.h',
              script='build_scripts/gen_histogram_enum.py',
              inputs=histogram_files)
GeneratedFile('TelemetryHistogramNameMap.h',
              script='build_scripts/gen_histogram_phf.py',
              inputs=histogram_files)

# Generate scalar files.
scalar_files = [
    'Scalars.yaml',
]

GeneratedFile('TelemetryScalarData.h',
              script='build_scripts/gen_scalar_data.py',
              inputs=scalar_files)
GeneratedFile('TelemetryScalarEnums.h',
              script='build_scripts/gen_scalar_enum.py',
              inputs=scalar_files)

# Generate the JSON scalar definitions. They will only be
# used in artifact or "build faster" builds.
GeneratedFile(
    'ScalarArtifactDefinitions.json',
    script='build_scripts/gen_scalar_data.py',
    entry_point='generate_JSON_definitions',
    inputs=scalar_files)

# Move the scalars JSON file to the directory where the Firefox binary is.
FINAL_TARGET_FILES += ['!ScalarArtifactDefinitions.json']

# Generate event files.
event_files = [
    'Events.yaml',
]

GeneratedFile('TelemetryEventData.h', script='build_scripts/gen_event_data.py',
              inputs=event_files)

GeneratedFile('TelemetryEventEnums.h', script='build_scripts/gen_event_enum.py',
              inputs=event_files)

# Generate the JSON event definitions. They will only be
# used in artifact or "build faster" builds.
GeneratedFile('EventArtifactDefinitions.json',
              script='build_scripts/gen_event_data.py',
              entryt_point='generate_JSON_definitions', inputs=event_files)

# Move the events JSON file to the directory where the Firefox binary is.
FINAL_TARGET_FILES += ['!EventArtifactDefinitions.json']

# Generate data from Processes.yaml
processes_files = [
    'Processes.yaml',
]

GeneratedFile('TelemetryProcessEnums.h',
              script='build_scripts/gen_process_enum.py',
              inputs=processes_files)


GeneratedFile('TelemetryProcessData.h',
              script='build_scripts/gen_process_data.py',
              inputs=processes_files)

with Files('**'):
    BUG_COMPONENT = ('Toolkit', 'Telemetry')
